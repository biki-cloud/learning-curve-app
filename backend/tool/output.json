[
  {
    "id": 6,
    "title": "放っておく力",
    "content": "放っておく力\nうまくいかなかった場合は常に「ああすればよかったかな」というような後悔がつきまといます。そっちにしたところでうまくいったとは限らないのに、〝うまくいったに違いない幻想〟にとらわれてしまう部分もあるかもしれません。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 10,
    "title": "放っておく力",
    "content": "放っておく力\n何か問題が起きて、どんなにジタバタもがいても、死なない命はないし、終わらない物事もないのです。 　同じように、いいことも、悪いことも、いつまでも続きません。 　この「諸行無常」という当たり前の真理を、常に頭の片隅においておけば、いいことが続いて有頂天になることも、悪いことが続いて落ち込むこともなくなります。心が、人生が安定します。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 9,
    "title": "独学大全",
    "content": "独学大全\n苦手な科目 や作業 について、ほんの少しだけ取り組むこと（例えば英単語を２個見る、問題を１問だけ解くなど） を、１時間ごとに（あるいは最初は 10 分ごとに） 数回繰り返してみよう。 なかなか取り掛かれなかったもの、ついつい後回しにしがちな作業など、この方法で急速に習慣化することが可能である。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 13,
    "title": "独学大全",
    "content": "独学大全\nよほど理由がないかぎり、やり方も投下する時間も変えない方がいい。あせって学習時間を増やしても、一時的ならともかく長続きしない。やり方を変えると、そっちの方面で初心者効果が得られて気持ちいいものだから、学習法を取っ替え引っ替えする誘惑には抵抗しにくいものだが、問題の根本的解決になってないのはわかるだろう。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 19,
    "title": "Think clealy",
    "content": "Think clealy\nフォーカシング・イリュージョンとは「特定のことについて集中して考えているあいだはそれが人生の重要な要素のように思えても、実際にはあなたが思うほど重要なことでもなんでもない」という錯覚を表す言葉だと。 　つまり、 人生における「特定の要素」だけに意識を集中させると、その要素が人生に与える影響を大きく見積もりすぎてしまう。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 3,
    "title": "アドラー",
    "content": "アドラー\n「神よ、願わくは我に　変えられることを変える勇気と　変えられないことを受け入れる忍耐力と　両者の違いを理解する知恵を与えたまえ」\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 18,
    "title": "放っておく力",
    "content": "放っておく力\n昔の武士の社会には、失敗すると「お腹召しませ」と命じられることもありましたが、いまの世の中、責任を取らされたとしても、減俸、左遷、解雇がせいぜい。命まで取られることはありません。かすり傷程度だと思えばいい。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 2,
    "title": "休養にはキャンプなどに行ってリフレッシュする積極的休養と",
    "content": "休養にはキャンプなどに行ってリフレッシュする積極的休養と\n家でゴロゴロする消極的急用が存在する。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 21,
    "title": "Think clealy",
    "content": "Think clealy\n結論。「どれだけ長生きできるか」を競うのは品がない。 よい人生を過ごすほうが、よい死を迎えるよりずっと大事だ。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 8,
    "title": "心配事の９割は起きない",
    "content": "心配事の９割は起きない\n比較することをやめたら、そう、妄想の九割は消えてなくなります。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 17,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n\n問題に直面したときは、その問題を一度に解決しようとはせず、問題を細分化し、その一つひとつを解決するようにしなさい」\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 5,
    "title": "独学大全",
    "content": "独学大全\nより長く学ぶことは、それだけ長く自分の頭の悪さに直面し続けることだし、より深く学ぶことは、それだけ深く自分の間抜けさと向かい合うこと\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 4,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n繰り返し潜在意識に命令を送り込むことが、信念を自発的に開発する方法である。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 11,
    "title": "Think clealy",
    "content": "Think clealy\n\nだからあなたも、「モノ」を買うよりも、何かを「経験」することに投資をしたほうがいい。\n結論。私たちは「モノ」が与えてくれる幸せの効果を過大評価し、「経験」が与えてくれる幸せの効果を過小評価している。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 7,
    "title": "アドラー",
    "content": "アドラー\n恥ずかしいというときは『どう見られているか』と自分にしか関心がいっていない。恥ずかしくなくなったときは「どんな人なんだろう」と相手に関心がいっている。」\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 12,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n最もよく見られる失敗の原因は、一時的な敗北にすぎないのに、すぐに願望の維持をあきらめてしまうことである。願望の大小は別として、誰でも一度や二度はこのような経験があるに違いない。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 14,
    "title": "think smart",
    "content": "think smart\n\n比較し、吟味し、決断をすると、私たちは疲労困憊 してしまう。\n意志の力を充電する」には、どうすればいいのだろう？　休憩をとったり、リラックスしたり、何かを食べたりするといい。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 20,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n逆境は、常にそれ以上の利益の種子を秘めている。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 16,
    "title": "人を動かす",
    "content": "人を動かす\n\n人間は誰でも皆、自分をほめてくれる者を好くものだ。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 15,
    "title": "放っておく力",
    "content": "放っておく力\n私ができるのは人事を尽くすことだけで、結果がどうなるかを決めるのは私ではない。だから事が終われば、心をわずらわせることは何もない」\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-31",
    "lastReviewedDate": "2024-08-31",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-03"
  },
  {
    "id": 31,
    "title": "アドラー",
    "content": "アドラー\nあなたが劣っているから劣等感があるのではない。 どんなに優秀に見える人にも劣等感は存在する。 目標がある限り、劣等感があるのは当然なのだ。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 32,
    "title": "アドラー",
    "content": "アドラー\n「やる気をなくす」という決断を自分でしただけだ。 「変われない」のではない。 「変わらない」という決断を自分でしているだけだ。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 33,
    "title": "アドラー",
    "content": "アドラー\n劣等コンプレックス」とは「劣等感」を言い訳にして、人生の課題から逃げ出すことを指します。 つまり、劣等感をバネにして「なにくそ」と頑張る人は、「劣等感」は持っているものの「劣等コンプレックス」を持っていない のです。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 35,
    "title": "アドラー",
    "content": "アドラー\n「私は暗い性格です……」「私はのろまといつも言われています……」。そのように自分を卑下し、自分で自分の勇気をくじいている人が世の中には多くいます。また、同様に部下や子供に対して勇気をくじいている親や上司もたくさんいます。しかし、ものの味方を変えるだけで短所は長所に生まれ変わります。本人が何も変わらなくてもいい。こちら側の見方を変えれば、それだけでいいのです。 「暗い」のではなく「優しい」のです。 「のろま」なのではなく「ていねい」\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 27,
    "title": "独学大全",
    "content": "独学大全\n才能の限界が見えようと、スランプに陥ろうと、若輩者がどんどん自分を抜いていこうと、病気や事故か何かでそれまで得たたくさんのものを失おうと、もうそれを学ぶことなしにはいられないから続けるんだ。コスパ〈 33〉 の勘定ができないからバカだし、繰り返しバカであることを自覚させられるから（謙遜抜きに） 自画像的にもバカだろう。だが〈中級の壁〉を越えて、ずっと先まで行くのは、そういうバカ\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 34,
    "title": "アドラー",
    "content": "アドラー\n敗北を避けるために、時に人は自ら病気になる。 「病気でなければできたのに……」 そう言い訳して安全地帯へ逃げ込み、ラクをするのだ。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 26,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n最終的に勝利を収めるのは、〝私はできる〟と思っている人なのだ\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 29,
    "title": "放っておく力",
    "content": "放っておく力\n人生は「やってみなければわからない」ことの連続です。やる前に「こうすればいいかな。ああすればいいかな。どの選択肢を選ぶのが正解かな」などといくら考えても、ほとんど意味はありません。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 22,
    "title": "Think clealy",
    "content": "Think clealy\n三つ目は、もしあなたがボエティウスのようにすべてを、あるいは多くのものを失ったとしても、あなたの人生にはよいことのほうが多く（そうでなければ失ったものを惜しまないだろう）、よいことにも負の要素はつきものだったことを忘れないこと。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 38,
    "title": "アドラー",
    "content": "アドラー\n遺伝や育った環境は単なる「材料」でしかない。 その材料を使って 住みにくい家を建てるか、住みやすい家を建てるかは、 あなた自身が決めればいい。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 23,
    "title": "Think clealy",
    "content": "Think clealy\n誰かがあなたを「間違って」評価しても驚いてはいけない。あなただって、自分を正しく評価できていないのだ。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 37,
    "title": "人は人、自分は自分",
    "content": "人は人、自分は自分\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 30,
    "title": "心配事の９割は起きない",
    "content": "心配事の９割は起きない\n世の中に失敗というものはない。チャレンジしているうちは失敗はない。あきらめたときが失敗である\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 25,
    "title": "放っておく力",
    "content": "放っておく力\n\n「終わらない今日はない。やまない雨はない。どんな嫌なこともいつかは終わる」\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 39,
    "title": "悪いところ、いいところ全て含めて自分。",
    "content": "悪いところ、いいところ全て含めて自分。\n自分がダメだなと思っているところも自分自身。それが自分なんだからしょうがない。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 28,
    "title": "独学大全",
    "content": "独学大全\n\nヒトは自分が今どの水準にいるかではなく、自分が持つ基準から見てどれだけ増えたか減ったかに反応して一喜一憂する、 度し難い生き物 だ。直線的成長を基準にしてしまうと、上達の鈍化をまるで悪化や損失のように感じることになる。実際はわずかでも進んでいるにもかかわらず、だ。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 53,
    "title": "ジョジョ",
    "content": "ジョジョ\n\n**いいかい! もっとも『むずかしい事』は! 『自分を乗り越える事』さ!**\n\n岸部露伴\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 44,
    "title": "反応しない練習",
    "content": "反応しない練習\n\n「人は人。自分は自分」という明確な境界線を引くのです。\n自分を否定しない」。どんなときも\n大人でも、イヤな記憶を思い出したり、不快な感情に悩まされたりしたときは、「体の感覚に意識を向ける」ことです。外を歩く。スポーツをする。お風呂に入る。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 47,
    "title": "アイシールド２１",
    "content": "アイシールド２１\n\n負け犬ってのはやる前から\n「きっと出来ねえ」\nつってやらねえ奴だけだ\n\n蛭間\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 42,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n我こそが運命の支配者にして我が魂の船長\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 63,
    "title": "@Service: ビジネスロジックのクラスに付ける",
    "content": "@Service: ビジネスロジックのクラスに付ける\n\n@Controller: web のコントローラークラスに付ける\n\n@Repository: db などからデータを取ってくるクラスに付ける\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 57,
    "title": "@Component をつけてコンストラクタインジェクションしていると通常自動で spring がオブジェクトを自動生成するが、@Lazy をつけると自動生成しなくなる。",
    "content": "@Component をつけてコンストラクタインジェクションしていると通常自動で spring がオブジェクトを自動生成するが、@Lazy をつけると自動生成しなくなる。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 46,
    "title": "カイジ",
    "content": "カイジ\n\n「明日からがんばるんじゃない……今日……今日だけがんばるんだっ……! 今日をがんばった者……今日をがんばり始めた者にのみ……明日が来るんだよ……!」\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 51,
    "title": "アイシールド２１",
    "content": "アイシールド２１\n\n…ないもんねだりしてるほどヒマじゃねえ\nあるもんで最強の闘い方探ってくんだよ\n一生な\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 41,
    "title": "思考は現実化する",
    "content": "思考は現実化する\n大きな成功というものは人々が敗北感に屈してしばらく経ったときにやってくるものである、\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 54,
    "title": "アイシールド２１",
    "content": "アイシールド２１\n\n**「打ちのめされたことがない選手などいない。ただ一流の選手はあらゆる努力を払い速やかに立ち上がろうとする。敗者はいつまでもグラウンドに横たわったままである。」**\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 60,
    "title": "Bean を識別する方法は@Qualifier を使う。",
    "content": "Bean を識別する方法は@Qualifier を使う。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 61,
    "title": "DAO とは？",
    "content": "DAO とは？\n\ndata access object.\n\nDB とデータをやりとりするオブジェクト\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 59,
    "title": "- JDBC: java での ORM ライブラリ。各コードが多い。",
    "content": "- JDBC: java での ORM ライブラリ。各コードが多い。\n\n- Spring JDBC: spring での jdbc ライブラリ。書くコードが少ない。\n\n- JPA：Java での ORM ライブラリ。クラスと DB のテーブルが紐付いている。\n\n- Spring Data JPA: JPA の Spring バージョン。よりシンプルになっている。これが spring で DB とやりとりする際の一番の方法。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 49,
    "title": "ジョジョ",
    "content": "ジョジョ\n\n**『覚悟』とは!! 暗闇の荒野に!! 進むべき道を切り開く事だッ!**\n\nジョルノジョバーナ\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 52,
    "title": "銀魂",
    "content": "銀魂\n\n「結局堅実に地道にコツコツ努力している奴等には敵わない。そう、たった一発で強くなろうなんて考えてる連中はしょせん何年も何十年も日々地道に鍛錬をくり返す奴等に勝つことなんてできやしないんだ」\n\nマダオ\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 56,
    "title": "Prototype と Singleton の違い",
    "content": "Prototype と Singleton の違い\n\nPrototype: オブジェクトを作成するごとにオブジェクトの内容が異なる。obj == obj が true にならない。@Scope を使用する。一般的ではない。\n\nsingleton：spring で毎回作成するオブジェクトは同じになる。一般的。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 43,
    "title": "成長できる。",
    "content": "成長できる。\n\n25 歳くらいで人の注意を真に受けれなくなってきたと感じた。\nそれではダメな人間になってしまう。\n何歳になろうと柔軟に受け入れて**俺は成長する**。\n何歳だろうと成長できる！！\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 0,
    "incorrectCount": 2,
    "level": 1,
    "nextReviewDate": "2024-08-31"
  },
  {
    "id": 50,
    "title": "ジョジョ",
    "content": "ジョジョ\n\n「人というのは成功や勝利よりも『失敗』から学ぶことが多い…………」\n\nジョルノジョバーナ\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 48,
    "title": "アイシールド２１",
    "content": "アイシールド２１\n\nケケケ\nいくら奇策珍策練ろうがな\n結局最後にモノ言うのは基礎トレだ\nおう糞ドレッド\nテメーが神龍寺で練習サボってる間――\n0.1 秒縮めんのに一年かかったぜ…!!\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 58,
    "title": "同じパッケージ内で以下のように定義すると MyClass の中で Dependency が自動で初期化される。",
    "content": "同じパッケージ内で以下のように定義すると MyClass の中で Dependency が自動で初期化される。\n\n同じパッケージ内だったら@ComponentScan はパッケージを指定する必要がない。\n\nここは結構 dependency injection がわかりやすい\n\n```\n@Component\n\nclass Dependency{}\n\n\n\n@Configuration\n\n@ ComponentScan\n\nclass MyClass {}\n```\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 55,
    "title": "Configuration properties を使用して application properties ファイルで設定値を定義し、読み込むことができる",
    "content": "Configuration properties を使用して application properties ファイルで設定値を定義し、読み込むことができる\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-31",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-03"
  },
  {
    "id": 69,
    "title": "Spring framework は dependency injection などのコア機能",
    "content": "Spring framework は dependency injection などのコア機能\n\nSpring mvc は rest controller なとの機能\n\nSpring boot は auto configuration や actuater などの production ready な機能\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 73,
    "title": "Spring bootはjarファイルにWEBサーバーを含んでいる",
    "content": "Spring bootはjarファイルにWEBサーバーを含んでいる",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 79,
    "title": "@ComponentScan と@Configuration を使用することで",
    "content": "@ComponentScan と@Configuration を使用することで\n\n使用したいクラスを初期化せずに applicationContext から使用できる。\n\nこれが auto-wiring\n\n使用元のクラスには@Component をつける。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 0,
    "incorrectCount": 1,
    "level": 1,
    "nextReviewDate": "2024-08-31"
  },
  {
    "id": 75,
    "title": "xmlConfiguration を使うと",
    "content": "xmlConfiguration を使うと\n\n@ComponentScan を使用しなくても、Spring に Bean を xml に記述することで登録することができる。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 64,
    "title": "path variable",
    "content": "path variable\n\n```java\n\n@GetMapping(path = \"/hello-world/path-variable/{name}\")\n\npublic HelloWorldBean helloWorldPathVariable(@PathVariable String name) }\n\n  return new HelloWorldBean(\"hello wold\"):\n\n}\n\n```\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 45,
    "title": "ジョジョ",
    "content": "ジョジョ\n\n**黄金の精神とは、恐怖に屈しない勇気、大切な人を思いやる優しさ、困難を乗り越える精神力、自分の責任を果たそうとする覚悟である！**\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 67,
    "title": "Dependency Injection タイプ",
    "content": "Dependency Injection タイプ\n\n- コンストラクタベース\n\nコンストラクタに@Autowired を使う方式\n\nおすすめはコンストラクタベースインジェクション！自作のクラスはほぼこれを使う！！\n\n- セッターベース\n\nセッターに@Autowired を使う方式。\n\n- フィールドベース\n\nフィールドに@Autowired を使う方式。これもたまに使う。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 80,
    "title": "@Component で AutoWiring するクラス名やインターフェース名が被ったら`@Primary` をつける",
    "content": "@Component で AutoWiring するクラス名やインターフェース名が被ったら`@Primary` をつける\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 76,
    "title": "service.save(user)でユーザを作成するが以下のように返り値は返した方が良さそう。",
    "content": "service.save(user)でユーザを作成するが以下のように返り値は返した方が良さそう。\n\nUser savedUser = service.save(user);\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 71,
    "title": "コンストラクタインジェクション",
    "content": "コンストラクタインジェクション\n\nこれが SpringBoot がとてもおすすめな方法！！\n\n```java\n@Component\nClass MyClass {\n  Dependency1 dependency1;\n  Dependency2 dependency2;\n\n  public MyClass(Dependency1 dependency1, Dependency2 dependency2) {\n    this.dependency1 = dependency1;\n    this.dependency2 = dependency2;\n  }\n}\n```\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 68,
    "title": "api のリソース名は複数形が良さそう。",
    "content": "api のリソース名は複数形が良さそう。\n\n/user\n\nor\n\n/users\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 65,
    "title": "spring REST API でやっている裏側",
    "content": "spring REST API でやっている裏側\n\n1. リクエストを DispatcherServlet が受け取り、適切なメソッドマッピングに送る。\n\n2. RestController アノテーションをつけることで、@ResponseBody と JacksonHttpMessageConverters が使用でき、オブジェクトの内容を自動的に JSON にして返す。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 77,
    "title": "Actuaterを使用して、ヘルスチェックやメトリクスのエントリーポイントを作成できる",
    "content": "Actuaterを使用して、ヘルスチェックやメトリクスのエントリーポイントを作成できる",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 74,
    "title": "POST でオブジェクトを作成した際に",
    "content": "POST でオブジェクトを作成した際に\n\nlocation ヘッダーに作成されたオブジェクトにアクセスするための URI を貼り付けるらしい\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 0,
    "incorrectCount": 1,
    "level": 1,
    "nextReviewDate": "2024-08-31"
  },
  {
    "id": 66,
    "title": "@PostConstruct: これをコンストラクタが呼ばれた後に自動実行したい関数に付与する。",
    "content": "@PostConstruct: これをコンストラクタが呼ばれた後に自動実行したい関数に付与する。\n\n@PreDestroy: これをオブジェクトが破棄される前に実行したい関数に付与する。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 72,
    "title": "Lazy Initialization と Eager initialization の違い",
    "content": "Lazy Initialization と Eager initialization の違い\n\nLazy: spring で自動でオブジェクトを作成しないようにする。あまり使われない。\n\nEager: spring で自動でオブジェクトを作成する。通常使用される。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 78,
    "title": "Class path とは？",
    "content": "Class path とは？\n\nJVM がコンパイルするために必要なクラスが入ったパスを定義したもの。シンプル。\n\n環境変数とかでクラスが入ったディレクトリが指定される。\n\nAuto-Configuration とは？\n\nspringboot は設定がクソ多いので、一から設定していると時間がかかりすぎる。\n\nそのため、bulid.gradle に依存関係(H2Database)とかを入れていると何かコードとか準備しなくても基本的に自動で H2Database のオブジェクトを起動して用意してくれる。\n\nhttps://docs.spring.io/spring-boot/docs/2.0.x/reference/html/using-boot-auto-configuration.html\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 82,
    "title": "ジョジョ",
    "content": "ジョジョ\n\n私は「結果」だけを求めてはいない。「結果」だけを求めていると、人は近道をしたがるものだ…近道した時、真実を見失うかもしれない。やる気も次第に失せていく。\n\n大切なのは「真実に向かおうとする意志」だと思っている。向かおうとする“意志さえあれば” いつかはたどり着くだろう？ 向かっているわけだからな… 違うかい？\n",
    "category": "life-anime",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 70,
    "title": "@Component と@Bean の違い",
    "content": "@Component と@Bean の違い\n\n@Component はクラスに付ける\n\n@Bean は@Configuration の付いたクラスのメソッドに付ける\n\n@Component が絶対的におすすめ！何か独自でやりたいことがあれば@Bean を使うかも\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 40,
    "title": "頑張らない働き方",
    "content": "頑張らない働き方\n\nスキルが高い人が楽な仕事ばかりしていても、集中力は高まりません。もっというと、退屈で、苦痛です。フロー状態にはなれません。 　反対に、スキルがないのに難度が高い仕事をすると「失敗するのではないか」という恐怖を感じます。ここでもフロー状態には入れません。\n\n理想は「忙しいけれど仕事を楽しんでいる状態」をつくることです。 　 あるいは、忙しいけれど学んでいる、忙しいけれど好奇心をもって仕事をしている状態をつくることです。\n\n「がんばる」のではなく、まずは楽になり余裕をつくること。それから仕事内容を見直し、自分にとってより価値の高い仕事にフォーカスできるようにすることが大切なのです。\n\n圧倒的に仕事ができる人は、上司にさんざん怒られる人であることが多いのです。\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 1,
    "incorrectCount": 0,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 36,
    "title": "独学大全",
    "content": "独学大全\n学習のコストパフォーマンス ばかり気にしてる奴は、自分の伸び悩みに耐えられない。学習にも ビギナーズ・ラック みたいなものがあるから、たまたま最初に触れたやり方が合っていて、最初は面白いように上達できることがある。何よりまだ何にも知らないしできないから、わずかな進歩を大げさに喜んで学ぶのがますます面白くなっていく、 モチベーションと努力の好循環 に入ることだってあるだろう。 オレって才能あるんじゃね？　状態 だな。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 2,
    "incorrectCount": 0,
    "level": 3,
    "nextReviewDate": "2024-09-06"
  },
  {
    "id": 62,
    "title": "Java の EE について",
    "content": "Java の EE について\n\nEE シリーズとは enterprise edition でエンタープライズレベルのアプリケーションを作成するための技術パックのようなもの。シリーズごとに JSP などいろんな機能が入っているイメージ。\n\n以下のように時代ごとに変移\n\nJ2EE -> Java EE -> Jakarta EE\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 1,
    "title": "放っておく力",
    "content": "放っておく力\n「どっちへ行きたいかわからなければ、どっちの道へ行ったって大した違いはない」 　ようするに、「どれが正解か」で悩むことは、意味がないということです。考え方としては、「選択肢のどれを選んでも同じ」であり、そして、「選んだ選択肢でいい結果が出るようにがんばる」というのがいいでしょう。\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 24,
    "title": "独学だいぜん",
    "content": "独学だいぜん\nつまり影響の大きさで言えば、「どのように学ぶか」よりも「何を学ぶか」が大事だし、「何を学ぶか」よりも「学び続けるか否か」の方が重大だという話\n\n\n",
    "category": "life",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 2,
    "correctCount": 1,
    "incorrectCount": 1,
    "level": 2,
    "nextReviewDate": "2024-09-02"
  },
  {
    "id": 81,
    "title": "- @Component: これをつけるとそのクラスは SpringBoot が管理する Bean として扱われる。",
    "content": "- @Component: これをつけるとそのクラスは SpringBoot が管理する Bean として扱われる。\n\n- @ComponentScan: SpringBoot が@Component とついたクラスを探すのに使う。\n\nDependency Injection\n\n- Spring Beans: Spring が管理するオブジェクト\n\n- IoC Container: Bean のライフサイクルや依存を管理する\n\n- タイプ１：ApplicationContext(複雑、普通に使う),\n\n- タイプ２：Bean Factory(シンプル、滅多に使わない。）\n\n- @Autowired：オブジェクトを作成する際にそのクラスでの依存関係を確認して、依存になっているオブジェクトを自動で作成する。wire -> ワイヤーで繋ぐみたいな？。その依存関係のクラスの@Component が使われている必要がある。ないと spring が管理していないため。\n",
    "category": "work-springboot",
    "user": {
      "id": 1,
      "username": "newuser",
      "password": "password123",
      "email": "newuser@example.com"
    },
    "createdDate": "2024-08-30",
    "lastReviewedDate": "2024-08-30",
    "reviewCount": 1,
    "correctCount": 0,
    "incorrectCount": 1,
    "level": 1,
    "nextReviewDate": "2024-08-31"
  }
]
